using AutoMapper;
using JaCore.Api.DTOs.Auth;
using JaCore.Api.Entities.Identity;

namespace JaCore.Api.Mappings.Auth;

public class AuthProfile : Profile
{
    public AuthProfile()
    {
        // Map RegisterDto to ApplicationUser
        CreateMap<RegisterDto, ApplicationUser>()
            .ForMember(dest => dest.UserName, opt => opt.MapFrom(src => src.Email)) // Set UserName from Email
            .ForMember(dest => dest.Id, opt => opt.Ignore()) // Don't map Id (generated by Identity)
            .ForMember(dest => dest.PasswordHash, opt => opt.Ignore()) // Password handled by UserManager
            .ForMember(dest => dest.SecurityStamp, opt => opt.Ignore()) // Handled by Identity
            .ForMember(dest => dest.ConcurrencyStamp, opt => opt.Ignore()) // Handled by Identity
            .ForMember(dest => dest.NormalizedEmail, opt => opt.Ignore()) // Handled by Identity
            .ForMember(dest => dest.NormalizedUserName, opt => opt.Ignore()) // Handled by Identity
            .ForMember(dest => dest.LockoutEnd, opt => opt.Ignore()) // Handled by Identity
            .ForMember(dest => dest.LockoutEnabled, opt => opt.Ignore()) // Handled by Identity
            .ForMember(dest => dest.AccessFailedCount, opt => opt.Ignore()) // Handled by Identity
            .ForMember(dest => dest.EmailConfirmed, opt => opt.Ignore()) // Handled by Identity logic (e.g., set manually or via confirmation flow)
            .ForMember(dest => dest.PhoneNumberConfirmed, opt => opt.Ignore()) // Handled by Identity logic
            .ForMember(dest => dest.TwoFactorEnabled, opt => opt.Ignore()) // Handled by Identity
            .ForMember(dest => dest.RefreshTokens, opt => opt.Ignore()) // Navigation property
            .ForMember(dest => dest.IsActive, opt => opt.MapFrom(src => true)); // Default to active on registration

        // Add other Auth related mappings here if needed
        // e.g., ApplicationUser to UserInfoDto
    }
} 