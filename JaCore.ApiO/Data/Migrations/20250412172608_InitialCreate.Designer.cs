// <auto-generated />
using System;
using JaCore.Api.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace JaCore.Api.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250412172608_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("JaCore.ApiO.Models.Device.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("JaCore.ApiO.Models.Device.Device", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("DataState")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int?>("DeviceCardId")
                        .HasColumnType("int");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("ModifiedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("OperationalState")
                        .HasColumnType("int");

                    b.Property<int>("OrderIndex")
                        .HasColumnType("int");

                    b.Property<string>("Properties")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("DeviceCardId")
                        .IsUnique()
                        .HasFilter("[DeviceCardId] IS NOT NULL");

                    b.ToTable("Devices");
                });

            modelBuilder.Entity("JaCore.ApiO.Models.Device.DeviceCard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset?>("DateOfActivation")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("MetrologicalConformationId")
                        .HasColumnType("int");

                    b.Property<string>("SerialNumber")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("ServiceId")
                        .HasColumnType("int");

                    b.Property<int?>("SupplierId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MetrologicalConformationId")
                        .IsUnique()
                        .HasFilter("[MetrologicalConformationId] IS NOT NULL");

                    b.HasIndex("ServiceId");

                    b.HasIndex("SupplierId");

                    b.ToTable("DeviceCards");
                });

            modelBuilder.Entity("JaCore.ApiO.Models.Device.DeviceOperation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("DeviceId")
                        .HasColumnType("int");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRequired")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("OrderIndex")
                        .HasColumnType("int");

                    b.Property<string>("UiElements")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.HasKey("Id");

                    b.HasIndex("DeviceId");

                    b.ToTable("DeviceOperations");
                });

            modelBuilder.Entity("JaCore.ApiO.Models.Device.Event", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("DeviceCardId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("From")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("To")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("Type")
                        .HasColumnType("int");

                    b.Property<string>("Who")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("DeviceCardId");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("JaCore.ApiO.Models.Device.MetrologicalConformation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Level1")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Level2")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Level3")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Level4")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("MetrologicalConformations");
                });

            modelBuilder.Entity("JaCore.ApiO.Models.Device.Service", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Contact")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Services");
                });

            modelBuilder.Entity("JaCore.ApiO.Models.Device.Supplier", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Contact")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Suppliers");
                });

            modelBuilder.Entity("JaCore.ApiO.Models.Device.Device", b =>
                {
                    b.HasOne("JaCore.ApiO.Models.Device.Category", "Category")
                        .WithMany("Devices")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("JaCore.ApiO.Models.Device.DeviceCard", "DeviceCard")
                        .WithOne("Device")
                        .HasForeignKey("JaCore.ApiO.Models.Device.Device", "DeviceCardId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Category");

                    b.Navigation("DeviceCard");
                });

            modelBuilder.Entity("JaCore.ApiO.Models.Device.DeviceCard", b =>
                {
                    b.HasOne("JaCore.ApiO.Models.Device.MetrologicalConformation", "MetrologicalConformation")
                        .WithOne("DeviceCard")
                        .HasForeignKey("JaCore.ApiO.Models.Device.DeviceCard", "MetrologicalConformationId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("JaCore.ApiO.Models.Device.Service", "Service")
                        .WithMany("DeviceCards")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("JaCore.ApiO.Models.Device.Supplier", "Supplier")
                        .WithMany("DeviceCards")
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("MetrologicalConformation");

                    b.Navigation("Service");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("JaCore.ApiO.Models.Device.DeviceOperation", b =>
                {
                    b.HasOne("JaCore.ApiO.Models.Device.Device", "Device")
                        .WithMany("DeviceOperations")
                        .HasForeignKey("DeviceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Device");
                });

            modelBuilder.Entity("JaCore.ApiO.Models.Device.Event", b =>
                {
                    b.HasOne("JaCore.ApiO.Models.Device.DeviceCard", "DeviceCard")
                        .WithMany("Events")
                        .HasForeignKey("DeviceCardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DeviceCard");
                });

            modelBuilder.Entity("JaCore.ApiO.Models.Device.Category", b =>
                {
                    b.Navigation("Devices");
                });

            modelBuilder.Entity("JaCore.ApiO.Models.Device.Device", b =>
                {
                    b.Navigation("DeviceOperations");
                });

            modelBuilder.Entity("JaCore.ApiO.Models.Device.DeviceCard", b =>
                {
                    b.Navigation("Device");

                    b.Navigation("Events");
                });

            modelBuilder.Entity("JaCore.ApiO.Models.Device.MetrologicalConformation", b =>
                {
                    b.Navigation("DeviceCard");
                });

            modelBuilder.Entity("JaCore.ApiO.Models.Device.Service", b =>
                {
                    b.Navigation("DeviceCards");
                });

            modelBuilder.Entity("JaCore.ApiO.Models.Device.Supplier", b =>
                {
                    b.Navigation("DeviceCards");
                });
#pragma warning restore 612, 618
        }
    }
}
